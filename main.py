import telebot
from telebot import types
from random import choice, shuffle
import json


# TOKEN = "5289245325:AAEo8pwsc7l5kL6YCqu1C6O6fB-0BtQLJJk" # –¢–æ–∫–µ–Ω –ò–ª—å–∏
TOKEN = "5798765362:AAFvMnOCIREv9JitthLukfH7pZjPWCY4SFs"  # –¢–æ–∫–µ–Ω –í–∏–ª—å—Å–æ–Ω–∞

bot = telebot.TeleBot(TOKEN)

our_id = -1001834028271
attempts = 3

users = json.load(open('users_info.json', 'r', encoding='utf-8'))
data = json.load(open('all_data.json', 'r', encoding='utf-8'))


# –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ñ—É–Ω–∫—Ü–∏–µ–π top
def keyboard_welcome():
    mark = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_1 = types.KeyboardButton(text="/tasks")
    btn_2 = types.KeyboardButton(text="/top")
    mark.add(btn_1)
    mark.add(btn_2)
    return mark


def keyboard_restart():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    but_1 = types.KeyboardButton(text='–ù–∞—á–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É')
    but_2 = types.KeyboardButton(text='–õ–∏–¥–µ—Ä—ã –ø–æ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é')
    markup.add(but_1)
    markup.add(but_2)
    return markup


@bot.message_handler(commands=["start"])
def welcome(message):
    uid = message.chat.id
    if str(uid) not in users:
        if message.chat.username:
            name = message.chat.username

        else:
            name = f"{message.from_user.first_name} {message.from_user.second_name}"
        user = json.load(open('Empty_uesrs_template.json', 'r', encoding='utf-8'))
        user["name"] = name
        for j in user["remaining_attempts"]:
            user["remaining_attempts"][j] = attempts
        users[str(uid)] = user
        open("users_info.json", "w").write(json.dumps(users))
    bot.send_message(message.chat.id,
                     f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}. –ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ '
                     f'–ï–ì–≠ –ø–æ —Ä—É—Å—Å–∫–æ–º—É.\n'
                     f'–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n'
                     f'/tasks - –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π\n'
                     f'/feedback - –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º\n'
                     f'/progress - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–¥–∞—á–∞–º\n'
                     f'/top - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª—É—á—à–∏—Ö –¥–µ—Å—è—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Å—É–º–º–µ –±–∞–ª–ª–æ–≤ –≤–æ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏—è—Ö\n',
                     reply_markup=keyboard_welcome())


@bot.message_handler(commands=["feedback"])
def feedback_from_user(message):
    mesg = bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º',
                            reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(mesg, feedback_to_us)


def feedback_to_us(message):
    bot.send_message(our_id, text=f'–ö –Ω–∞–º –ø–æ—Å—Ç—É–ø–∏–ª feedback –æ—Ç @{message.chat.username}:\n{message.text}',
                     reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(commands=["stats"])
def keys(message):
    bot.send_message(message.chat.id, text=f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {len(users.keys())}')


@bot.message_handler(commands=["tasks"])
def welcome(message):
    bot.send_message(message.chat.id, f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ —ç—Ç–æ–º –±–æ—Ç–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∑–∞–¥–∞–Ω–∏—è:\n'
                                      f'/task4 - –£–¥–∞—Ä–µ–Ω–∏—è\n'
                                      f'/task5 - –ü–∞—Ä–æ–Ω–∏–º—ã\n'
                                      f'/task6 - –õ–µ–∫—Å–∏—á–µ—Å–∫–∏–µ –Ω–æ—Ä–º—ã\n'
                                      f'/task7 - –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–æ—Ä–º—ã\n'
                                      f'/task8 - –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –Ω–æ—Ä–º—ã\n'
                                      f'/task9 - –ü—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–π\n'
                                      f'/task10 - –ü—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—Å—Ç–∞–≤–æ–∫\n'
                                      f'/task11 - –ü—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤ (–∫—Ä–æ–º–µ -–ù-/-–ù–ù-)\n'
                                      f'/task12 - –ü—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏–π –∏ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤\n'
                                      f'/task13 - –ü—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ –ù–ï –∏ –ù–ò\n'
                                      f'/task14 - –°–ª–∏—Ç–Ω–æ–µ, –¥–µ—Ñ–∏—Å–Ω–æ–µ, —Ä–∞–∑–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Å–ª–æ–≤\n'
                                      f'/task15 - –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–π\n'
                                      f'/task16 - –ü—É–Ω–∫—Ç—É–∞—Ü–∏—è –≤ —Å–ª–æ–∂–Ω–æ—Å–æ—á–∏–Ω–µ–Ω–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏\n'
                                      f'/task17 - –ó–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö —Å –æ–±–æ—Å–æ–±–ª–µ–Ω–Ω—ã–º–∏ —á–ª–µ–Ω–∞–º–∏\n'
                                      f'/task18 - –ó–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –ø—Ä–∏ —Å–ª–æ–≤–∞—Ö, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —á–ª–µ–Ω–∞–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n'
                                      f'/task19 - –ó–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ —Å–ª–æ–∂–Ω–æ–ø–æ–¥—á–∏–Ω–µ–Ω–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏\n'
                                      f'/task20 - –ó–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∏–¥–∞–º–∏ —Å–≤—è–∑–∏\n',
                                      # f'/task21 - –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è\n',
                     reply_markup=types.ReplyKeyboardRemove())


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@bot.message_handler(commands=["send_users"])
def message(message):
    mesg = bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:')
    bot.register_next_step_handler(mesg, send_message)


def send_message(mesg):
    for i in users:
        bot.send_message(i, text=mesg.text)


@bot.message_handler(commands=["progress"])
def progress(message):
    l = []
    uid = message.chat.id
    for j in users[str(uid)]['best_score']:
        l.append([users[str(uid)]['best_score'][j], j.replace("#", "")])
    l.sort(key=lambda x: x[0], reverse=True)
    local_out = f"–í–∞—à–∏ –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
    for j in range(5):
        local_out += f"{j + 1}) –ó–∞–¥–∞–Ω–∏–µ {l[j][1]} —Å –≤–∞—à–∏–º —Ä–µ–∫–æ—Ä–¥–æ–º {l[j][0]}\n"
    bot.send_message(message.chat.id, text=local_out, reply_markup=types.ReplyKeyboardRemove())


def task_initiation(message):
    uid = message.chat.id
    task_number = message.text.replace('/task', '')
    attempt_local = users[str(uid)]["remaining_attempts"]["#" + task_number]
    if attempt_local == 3:
        bot.send_message(message.from_user.id, f'–£ –≤–∞—Å –µ—Å—Ç—å {users[str(uid)]["remaining_attempts"]["#" + task_number]} –ø–æ–ø—ã—Ç–∫–∏',
                     reply_markup=keyboard_restart())
    else:
        bot.send_message(message.from_user.id,
                         f'–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {users[str(uid)]["remaining_attempts"]["#" + task_number]} –ø–æ–ø—ã—Ç–∫–∏',
                         reply_markup=keyboard_restart())
    users[str(uid)]['actual_task'] = f'#{task_number}'
    users[str(uid)]['actual_question'] = 0


# —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å–≤–∏—è
@bot.message_handler(commands=["task4", "task5", "task6", "task7", "task8",
                               "task9", "task10", "task11", "task12", "task13",
                               "task14", "task15", "task16", "task17", "task18",
                               "task19", "task20", "task21"])
def welcome_task5(message):
    task_number = message.text.replace('/task', '')
    if task_number in ["4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20",
                       "21"]:
        task_initiation(message)


# —Ñ—É–Ω–∫—Ü—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ —Ä–µ–∫–æ—Ä–¥–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=["top"])
def top_all(message):
    l = []
    for i in users:
        local_score = 0
        for j in users[i]['best_score']:
            local_score += max(users[i]['best_score'][j], users[i]['score'][j])
        l.append([local_score, users[i]["name"]])
    l.sort(key=lambda x: x[0], reverse=True)
    local_out = f"üèÜ –õ–∏–¥–µ—Ä—ã –ø–æ —Å—É–º–º–∞—Ä–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º:\n"
    for j in range(len(l)):
        if j == 9:
            break
        else:
            local_out += f"{j + 1})@{l[j][1]} —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {l[j][0]}\n"
    bot.send_message(message.chat.id, text=local_out, reply_markup=types.ReplyKeyboardRemove())


def top(message, text):
    l = []
    for i in users:
        local_score = users[i]['best_score']["#" + text]
        l.append([local_score, users[i]["name"]])
    l.sort(key=lambda x: x[0], reverse=True)
    local_out = f"üèÜ –õ–∏–¥–µ—Ä—ã –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º:\n"
    for j in range(len(l)):
        if j == 9:
            break
        else:
            local_out += f"{j + 1})@{l[j][1]} —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {l[j][0]}\n"
    bot.send_message(message.chat.id, text=local_out, reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(content_types=['text'])
def user_answer(message):
    uid = message.chat.id
    actual_task = users[str(uid)]['actual_task']
    if not users[str(uid)]['actual_question']:
        if message.text == '–ù–∞—á–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É':
            markup = question_update(str(uid))
            if not data[actual_task]['questions'][users[str(uid)]['actual_question']]['all']:
                markup = types.ReplyKeyboardRemove()

            bot.send_message(uid, f'{data[actual_task]["hello_text"]}', reply_markup=markup)
            if data[actual_task]['questions'][users[str(uid)]['actual_question']]['text']:
                bot.send_message(uid, data[actual_task]['questions'][users[str(uid)]['actual_question']]['text'])

        if message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É':
            markup = question_update(str(uid))
            bot.send_message(uid, data[actual_task]["hello_text"], reply_markup=markup)
            if data[actual_task]['questions'][users[str(uid)]['actual_question']]['text']:
                bot.send_message(uid, data[actual_task]['questions'][users[str(uid)]['actual_question']]['text'])

        if message.text == '–õ–∏–¥–µ—Ä—ã –ø–æ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é':
            x = actual_task
            top(message, x.replace("#", ""))

    else:
        if actual_task == "#8" and message.text == "–°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—à–∏–±–æ–∫":
            bot.send_message(message.chat.id, text=f'0) –í –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ—Ç –æ—à–∏–±–∫–∏\n'
                                                   f'1) –ù–∞—Ä—É—à–µ–Ω–∏–µ –≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –ø—Ä–∏—á–∞—Å—Ç–Ω—ã–º –æ–±–æ—Ä–æ—Ç–æ–º\n'
                                                   f'2) –ù–∞—Ä—É—à–µ–Ω–∏–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –ø–æ–¥–ª–µ–∂–∞—â–∏–º –∏ —Å–∫–∞–∑—É–µ–º—ã–º\n'
                                                   f'3) –û—à–∏–±–∫–∞ –≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –¥–µ–µ–ø—Ä–∏—á–∞—Å—Ç–Ω—ã–º –æ–±–æ—Ä–æ—Ç–æ–º\n'
                                                   f'4) –ù–∞—Ä—É—à–µ–Ω–∏–µ –≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –Ω–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º\n'
                                                   f'5) –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–¥–µ–∂–Ω–æ–π —Ñ–æ—Ä–º—ã —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å –ø—Ä–µ–¥–ª–æ–≥–æ–º\n'
                                                   f'6) –û—à–∏–±–∫–∞ –≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã–º–∏ —á–ª–µ–Ω–∞–º–∏\n'
                                                   f'7) –ù–∞—Ä—É—à–µ–Ω–∏–µ –≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –Ω–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º\n'
                                                   f'8) –û—à–∏–±–∫–∞ –≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∫–æ—Å–≤–µ–Ω–Ω–æ–π —Ä–µ—á—å—é\n'
                                                   f'9) –ù–∞—Ä—É—à–µ–Ω–∏–µ –≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –Ω–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º\n'
                                                   f'10) –ù–∞—Ä—É—à–µ–Ω–∏–µ –≤–∏–¥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–æ–æ—Ç–Ω–µ—Å—ë–Ω–Ω–æ—Å—Ç–∏ –≥–ª–∞–≥–æ–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º\n'
                                                   f'11) –û—à–∏–±–∫–∞ –≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ —Å–ª–æ–∂–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
                                                   f'12) –û—à–∏–±–∫–∞ –≤ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ')
        else:
            actual_question = users[str(uid)]['actual_question']
            if len(data[actual_task]['questions'][actual_question]['all']) > 1 and \
                    message.text not in data[actual_task]['questions'][actual_question]['all']:
                bot.send_message(uid, '–û—Ç–≤–µ—Ç –≤–≤–µ–¥–µ–Ω –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ')

            else:
                if (message.text.lower() == data[actual_task]['questions'][actual_question]['right'].lower() and actual_task != "#4") or (message.text == data[actual_task]['questions'][actual_question]['right'] and actual_task == "#4"):
                    markup = question_update(str(uid))
                    if not data[actual_task]['questions'][users[str(uid)]['actual_question']]['all']:
                        markup = types.ReplyKeyboardRemove()

                    bot.send_message(uid, '‚úÖ –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!', reply_markup=markup)
                    if data[actual_task]['questions'][users[str(uid)]['actual_question']]['text']:
                        bot.send_message(uid, data[actual_task]['questions'][users[str(uid)]['actual_question']]['text'])

                    users[str(uid)]['score'][actual_task] += 1

                else:
                    if users[str(uid)]["remaining_attempts"][actual_task] == 1:
                        users[str(uid)]["remaining_attempts"][actual_task] = attempts
                        if data[actual_task]["type_out"] == "NO":
                            if users[str(uid)]['score'][actual_task] <= users[str(uid)]['best_score'][actual_task]:
                                bot.send_message(uid, f'‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –æ—à–∏–±–ª–∏—Å—å:(.\n'
                                                      f'–í–∞—à–∏ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å(\n'
                                                      f'–í—ã –Ω–∞–±—Ä–∞–ª–∏ {users[str(uid)]["score"][actual_task]} –æ—á–∫–æ–≤.\n',
                                                 reply_markup=keyboard_restart())
                            else:
                                users[str(uid)]['best_score'][actual_task] = users[str(uid)]['score'][actual_task]
                                bot.send_message(uid,
                                                 f'‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –æ—à–∏–±–ª–∏—Å—å:(.\n'
                                                 f'–í–∞—à–∏ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å(\n'
                                                 f'–û–¥–Ω–∞–∫–æ –≤—ã –ø–æ–±–∏–ª–∏ —Å–≤–æ–π —Ä–µ–∫–æ—Ä–¥, –Ω–∞–±—Ä–∞–≤ {users[str(uid)]["score"][actual_task]} –æ—á–∫–æ–≤.\n',
                                                 reply_markup=keyboard_restart())

                        elif data[actual_task]["type_out"] == "YES":
                            if users[str(uid)]['score'][actual_task] <= users[str(uid)]['best_score'][actual_task]:
                                bot.send_message(uid,
                                                 f'‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –æ—à–∏–±–ª–∏—Å—å:(.\n'
                                                 f'–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{data[actual_task]["questions"][actual_question]["out_data"]}\n'
                                                 f'–í–∞—à–∏ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å(\n'
                                                 f'–í—ã –Ω–∞–±—Ä–∞–ª–∏ {users[str(uid)]["score"][actual_task]} –æ—á–∫–æ–≤.\n',
                                                 reply_markup=keyboard_restart())
                            else:
                                users[str(uid)]['best_score'][actual_task] = users[str(uid)]['score'][actual_task]
                                bot.send_message(uid,
                                                 f'‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –æ—à–∏–±–ª–∏—Å—å:(.\n'
                                                 f'–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{data[actual_task]["questions"][actual_question]["out_data"]}\n'
                                                 f'–í–∞—à–∏ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å(\n'
                                                 f'–û–¥–Ω–∞–∫–æ –≤—ã –ø–æ–±–∏–ª–∏ —Å–≤–æ–π —Ä–µ–∫–æ—Ä–¥, –Ω–∞–±—Ä–∞–≤ {users[str(uid)]["score"][actual_task]} –æ—á–∫–æ–≤.\n',
                                                 reply_markup=keyboard_restart())

                        elif data[actual_task]["type_out"] == "NO_YES":
                            if data[actual_task]["questions"][actual_question]["right"] == "–ù–µ—Å–ª–∏—Ç–Ω–æ" or \
                                    data[actual_task]["questions"][actual_question]["right"] == "–ù–µ—Ç" or \
                                    data[actual_task]["questions"][actual_question]["right"] == "–ù–µ–≤–µ—Ä–Ω–æ":
                                if users[str(uid)]['score'][actual_task] <= users[str(uid)]['best_score'][actual_task]:
                                    bot.send_message(uid,
                                                     f'‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –æ—à–∏–±–ª–∏—Å—å:(.\n'
                                                     f'–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{data[actual_task]["questions"][actual_question]["out_data"]}\n'
                                                     f'–í–∞—à–∏ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å(\n'
                                                     f'–í—ã –Ω–∞–±—Ä–∞–ª–∏ {users[str(uid)]["score"][actual_task]} –æ—á–∫–æ–≤.\n',
                                                     reply_markup=keyboard_restart())
                                else:
                                    users[str(uid)]['best_score'][actual_task] = users[str(uid)]['score'][actual_task]
                                    bot.send_message(uid,
                                                     f'‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –æ—à–∏–±–ª–∏—Å—å:(. '
                                                     f'–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{data[actual_task]["questions"][actual_question]["out_data"]}\n'
                                                     f'–í–∞—à–∏ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å(\n'
                                                     f'–û–¥–Ω–∞–∫–æ –≤—ã –ø–æ–±–∏–ª–∏ —Å–≤–æ–π —Ä–µ–∫–æ—Ä–¥, –Ω–∞–±—Ä–∞–≤ {users[str(uid)]["score"][actual_task]} –æ—á–∫–æ–≤.\n',
                                                     reply_markup=keyboard_restart())

                            else:
                                if users[str(uid)]['score'][actual_task] <= users[str(uid)]['best_score'][actual_task]:
                                    bot.send_message(uid,
                                                     f'‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –æ—à–∏–±–ª–∏—Å—å:(.\n–í—ã –Ω–∞–±—Ä–∞–ª–∏ {users[str(uid)]["score"][actual_task]} –æ—á–∫–æ–≤.\n'
                                                     f'–í–∞—à–∏ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å(\n',
                                                     reply_markup=keyboard_restart())
                                else:
                                    users[str(uid)]['best_score'][actual_task] = users[str(uid)]['score'][actual_task]
                                    bot.send_message(uid,
                                                     f'‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –æ—à–∏–±–ª–∏—Å—å:(.\n'
                                                     f'–í–∞—à–∏ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å(\n'
                                                     f'–û–¥–Ω–∞–∫–æ –≤—ã –ø–æ–±–∏–ª–∏ —Å–≤–æ–π —Ä–µ–∫–æ—Ä–¥, –Ω–∞–±—Ä–∞–≤ {users[str(uid)]["score"][actual_task]} –æ—á–∫–æ–≤.\n',
                                                     reply_markup=keyboard_restart())

                        users[str(uid)]['score'][actual_task] = 0
                        users[str(uid)]['actual_question'] = None
                    else:
                        users[str(uid)]["remaining_attempts"][actual_task] -= 1
                        markup = question_update(str(uid))
                        if not data[actual_task]['questions'][users[str(uid)]['actual_question']]['all']:
                            markup = types.ReplyKeyboardRemove()

                        if data[actual_task]["type_out"] == "NO":
                            bot.send_message(uid, f'‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –æ—à–∏–±–ª–∏—Å—å:(.\n'
                                                  f'–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {users[str(uid)]["remaining_attempts"][actual_task]} –ø–æ–ø—ã—Ç–æ–∫\n',
                                             reply_markup=markup)

                        elif data[actual_task]["type_out"] == "YES":
                            bot.send_message(uid,
                                             f'‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –æ—à–∏–±–ª–∏—Å—å:(.\n'
                                             f'–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{data[actual_task]["questions"][actual_question]["out_data"]}\n'
                                             f'–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {users[str(uid)]["remaining_attempts"][actual_task]} –ø–æ–ø—ã—Ç–æ–∫\n',
                                             reply_markup=markup)

                        elif data[actual_task]["type_out"] == "NO_YES":
                            if data[actual_task]["questions"][actual_question]["right"] == "–ù–µ—Å–ª–∏—Ç–Ω–æ" or \
                                    data[actual_task]["questions"][actual_question]["right"] == "–ù–µ—Ç" or \
                                    data[actual_task]["questions"][actual_question]["right"] == "–ù–µ–≤–µ—Ä–Ω–æ":
                                bot.send_message(uid,
                                                 f'‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –æ—à–∏–±–ª–∏—Å—å:(.\n'
                                                 f'–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{data[actual_task]["questions"][actual_question]["out_data"]}\n'
                                                 f'–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {users[str(uid)]["remaining_attempts"][actual_task]} –ø–æ–ø—ã—Ç–æ–∫\n',
                                                 reply_markup=markup)

                            else:
                                bot.send_message(uid,
                                                 f'‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –æ—à–∏–±–ª–∏—Å—å:(.\n–í—ã –Ω–∞–±—Ä–∞–ª–∏ {users[str(uid)]["score"][actual_task]} –æ—á–∫–æ–≤.\n'
                                                 f'–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {users[str(uid)]["remaining_attempts"][actual_task]} –ø–æ–ø—ã—Ç–æ–∫\n',
                                                 reply_markup=markup)

                        if data[actual_task]['questions'][users[str(uid)]['actual_question']]['text']:
                            bot.send_message(uid, data[actual_task]['questions'][users[str(uid)]['actual_question']]['text'])
            open("users_info.json", "w").write(json.dumps(users, indent=4))


def question_update(user_id):
    new_actual_question = choice(list(data[users[user_id]['actual_task']]['questions']))
    users[user_id]['actual_question'] = new_actual_question

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    if data[users[user_id]['actual_task']]['questions'][new_actual_question]['all']:
        shuffled_buttons = list(data[users[user_id]['actual_task']]['questions'][new_actual_question]['all'])
        shuffle(shuffled_buttons)
        if len(shuffled_buttons) == 2:
            btn_1 = types.KeyboardButton(shuffled_buttons[0])
            btn_2 = types.KeyboardButton(shuffled_buttons[1])
            markup.add(btn_1, btn_2)
        else:
            for ready_answer in shuffled_buttons:
                markup.add(types.KeyboardButton(text=ready_answer))

    return markup


if __name__ == '__main__':
    while True:
        try:
            bot.infinity_polling()
        except IndexError:
            pass
